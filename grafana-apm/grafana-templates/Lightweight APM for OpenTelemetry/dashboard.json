{
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "target": {
            "limit": 100,
            "matchAny": false,
            "tags": [],
            "type": "dashboard"
          },
          "type": "dashboard"
        }
      ]
    },
    "description": "Lightweight APM dashboard for monitoring OpenTelemetry-based services.  \n\nInstrument your applications using OpenTelemetry SDKs and send traces, metrics, and logs to Tempo for traces, a Prometheus-compatible database like Mimir for metrics, and Loki for logs. This dashboard provides a centralized view of your application's health and performance.  \n\nFor a fully managed observability stack, consider using Grafana Cloud.  \n\nLearn more about this dashboard on https://github.com/cyrille-leclerc/opentelemetry-service-dashboard.",
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 1,
    "id": 7,
    "links": [],
    "panels": [
      {
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 7,
          "x": 0,
          "y": 0
        },
        "id": 20,
        "options": {
          "code": {
            "language": "plaintext",
            "showLineNumbers": false,
            "showMiniMap": false
          },
          "content": "<h1><img src=\"https://opentelemetry.io/img/logos/opentelemetry-logo-nav.png\" alt=\"OpenTelemetry Icon\" width=\"25\" height=\"\"> Service ${service_namespace}/${service_name}</h1>",
          "mode": "html"
        },
        "pluginVersion": "11.5.1",
        "title": "",
        "type": "text"
      },
      {
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "description": "Shows the timestamp of the latest metrics received in the past 24h.",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#24292e",
              "mode": "fixed"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 4,
          "x": 7,
          "y": 0
        },
        "hideTimeOverride": true,
        "id": 39,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^Time$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "auto",
          "wideLayout": true
        },
        "pluginVersion": "11.5.1",
        "targets": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "${prometheus_datasource}"
            },
            "editorMode": "code",
            "expr": "timestamp(sum by (job) (target_info{job=~\"$service_namespace/$service_name\"}) or absent{})\n",
            "legendFormat": "__auto",
            "range": true,
            "refId": "A"
          }
        ],
        "timeFrom": "now-24h",
        "title": "Latest metrics received",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "loki",
          "uid": "P8E80F9AEF21F6940"
        },
        "description": "Shows the timestamp of the latest logs received in the past 24h.",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#24292e",
              "mode": "fixed"
            },
            "mappings": [],
            "noValue": "No data",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "dateTimeFromNow"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 4,
          "x": 11,
          "y": 0
        },
        "hideTimeOverride": true,
        "id": 40,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^Time$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "auto",
          "wideLayout": true
        },
        "pluginVersion": "11.5.1",
        "targets": [
          {
            "datasource": {
              "type": "loki",
              "uid": "${loki_datasource}"
            },
            "direction": "backward",
            "editorMode": "code",
            "expr": "sum(count_over_time({service_name=\"$service_name\", service_namespace=\"$service_namespace\"} [5m]))",
            "queryType": "range",
            "refId": "A"
          }
        ],
        "timeFrom": "now-24h",
        "title": "Latest logs received",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "tempo",
          "uid": "tempo"
        },
        "description": "Shows the timestamp of the latest span received in the past 24h.",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "#24292e",
              "mode": "fixed"
            },
            "mappings": [],
            "noValue": "No data",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "dateTimeFromNow"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 2,
          "w": 4,
          "x": 15,
          "y": 0
        },
        "hideTimeOverride": true,
        "id": 41,
        "options": {
          "colorMode": "background",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^time$/",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "auto",
          "wideLayout": true
        },
        "pluginVersion": "11.5.1",
        "targets": [
          {
            "datasource": {
              "type": "tempo",
              "uid": "${tempo_datasource}"
            },
            "filters": [
              {
                "id": "0344fb49",
                "operator": "=",
                "scope": "resource",
                "tag": "service.namespace",
                "value": [
                  "$service_namespace"
                ],
                "valueType": "string"
              },
              {
                "id": "service-name",
                "operator": "=",
                "scope": "resource",
                "tag": "service.name",
                "value": [
                  "$service_name"
                ],
                "valueType": "string"
              }
            ],
            "limit": 20,
            "metricsQueryType": "range",
            "query": "{resource.service.namespace=\"$service_namespace\" && resource.service.name=\"$service_name\"} | count_over_time()",
            "queryType": "traceql",
            "refId": "A",
            "tableType": "traces"
          }
        ],
        "timeFrom": "now-24h",
        "title": "Latest traces received",
        "type": "stat"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 2
        },
        "id": 15,
        "panels": [],
        "title": "Server HTTP RED Metrics",
        "type": "row"
      },
      {
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "description": "HTTP endpoints aggregation on the `http.server.request.duration` metric.\n\nSee https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpserverrequestduration",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "axisSoftMin": 0,
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "smooth",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "log": 10,
                "type": "log"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "min": 0,
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "s"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 6,
          "x": 0,
          "y": 3
        },
        "id": 17,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "tooltip": {
            "hideZeros": false,
            "mode": "single",
            "sort": "none"
          }
        },
        "pluginVersion": "11.5.1",
        "targets": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "${prometheus_datasource}"
            },
            "disableTextWrap": false,
            "editorMode": "code",
            "expr": "histogram_quantile(0.99, sum by(le, job) (rate(http_server_request_duration_seconds_bucket{service_name=\"$service_name\"}[$__rate_interval])))",
            "fullMetaSearch": false,
            "hide": false,
            "includeNullMetadata": true,
            "legendFormat": "P99",
            "range": true,
            "refId": "P99",
            "useBackend": false
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "disableTextWrap": false,
            "editorMode": "builder",
            "expr": "histogram_quantile(0.9, sum by(le, job) (rate(http_server_request_duration_seconds_bucket{job=\"$service_namespace/$service_name\"}[$__rate_interval])))",
            "fullMetaSearch": false,
            "includeNullMetadata": true,
            "legendFormat": "P90",
            "range": true,
            "refId": "P90",
            "useBackend": false
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "${prometheus_datasource}"
            },
            "disableTextWrap": false,
            "editorMode": "builder",
            "expr": "avg by(job) (rate(http_server_request_duration_seconds_sum{job=\"$service_namespace/$service_name\"}[$__rate_interval])) / avg by(job) (rate(http_server_request_duration_seconds_count{job=\"$service_namespace/$service_name\"}[$__rate_interval]))",
            "fullMetaSearch": false,
            "hide": false,
            "includeNullMetadata": true,
            "legendFormat": "AVG",
            "range": true,
            "refId": "AVG",
            "useBackend": false
          }
        ],
        "title": "Duration",
        "type": "timeseries"
      },
      {
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "description": "HTTP endpoints aggregation on the `http.server.request.duration` metric. \n\nErrors are identified by   `http.response.status_code=~\"5..\"`.\n\nSee https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpserverrequestduration",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "axisSoftMax": 100,
              "axisSoftMin": 0,
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "smooth",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "percent"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 6,
          "x": 6,
          "y": 3
        },
        "id": 18,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "tooltip": {
            "hideZeros": false,
            "mode": "single",
            "sort": "none"
          }
        },
        "pluginVersion": "11.5.1",
        "targets": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "${prometheus_datasource}"
            },
            "disableTextWrap": false,
            "editorMode": "code",
            "expr": "(sum without(http_status_code, error_type, instance) (rate(http_server_request_duration_seconds_count{service_namespace=\"$service_namespace\", service_name=\"$service_name\", http_status_code=~\"5..\"}[$__rate_interval])) * 100) / sum without(http_status_code, error_type, instance) (rate(http_server_request_duration_seconds_count{service_name=\"$service_name\", service_namespace=\"$service_namespace\"}[$__rate_interval]))",
            "fullMetaSearch": false,
            "hide": false,
            "includeNullMetadata": true,
            "instant": false,
            "legendFormat": "5xx",
            "range": true,
            "refId": "5xx",
            "useBackend": false
          }
        ],
        "title": "Error",
        "type": "timeseries"
      },
      {
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "description": "HTTP endpoints aggregation on the `http.server.request.duration` metric.\n\nSee https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpserverrequestduration",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "axisSoftMin": 0,
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "log": 10,
                "type": "log"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "min": 0,
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "reqps"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 5,
          "x": 12,
          "y": 3
        },
        "id": 19,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "tooltip": {
            "hideZeros": false,
            "mode": "single",
            "sort": "none"
          }
        },
        "pluginVersion": "11.5.1",
        "targets": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "${prometheus_datasource}"
            },
            "editorMode": "code",
            "expr": "(sum(rate(http_server_request_duration_seconds_count{service_namespace=\"$service_namespace\", service_name=\"$service_name\"}[$__rate_interval])) by (service_namespace, service_name)) * $__interval_ms / 1000",
            "hide": false,
            "legendFormat": "Requests",
            "range": true,
            "refId": "RequestRate"
          }
        ],
        "title": "Request Rate",
        "type": "timeseries"
      },
      {
        "collapsed": true,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 11
        },
        "id": 31,
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "description": "gRPC Endpoints aggregation, `rpc.server.duration` metric.\n\nSee https://opentelemetry.io/docs/specs/semconv/rpc/rpc-metrics/#metric-rpcserverduration",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "axisSoftMin": 0,
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "smooth",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "log": 10,
                    "type": "log"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "min": 0,
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "ms"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 6,
              "x": 0,
              "y": 12
            },
            "id": 33,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "single",
                "sort": "none"
              }
            },
            "pluginVersion": "11.5.1",
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "disableTextWrap": false,
                "editorMode": "code",
                "expr": "histogram_quantile(0.99, sum by(le, job) (rate(rpc_server_duration_milliseconds_bucket{job=\"$service_namespace/$service_name\"}[$__rate_interval])))",
                "fullMetaSearch": false,
                "hide": false,
                "includeNullMetadata": true,
                "legendFormat": "P99",
                "range": true,
                "refId": "P99",
                "useBackend": false
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "disableTextWrap": false,
                "editorMode": "builder",
                "expr": "histogram_quantile(0.9, sum by(le, job) (rate(rpc_server_duration_milliseconds_bucket{job=\"$service_namespace/$service_name\"}[$__rate_interval])))",
                "fullMetaSearch": false,
                "includeNullMetadata": true,
                "legendFormat": "P90",
                "range": true,
                "refId": "P90",
                "useBackend": false
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "disableTextWrap": false,
                "editorMode": "builder",
                "expr": "avg by(job) (rate(rpc_server_duration_milliseconds_sum{job=\"$service_namespace/$service_name\"}[$__rate_interval])) / avg by(job) (rate(rpc_server_duration_milliseconds_count{job=\"$service_namespace/$service_name\"}[$__rate_interval]))",
                "fullMetaSearch": false,
                "hide": false,
                "includeNullMetadata": true,
                "legendFormat": "AVG",
                "range": true,
                "refId": "AVG",
                "useBackend": false
              }
            ],
            "title": "Duration",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "description": "gRPC endpoints aggregation based on the `rpc.server.duration` metric.\n\nErrors are identified by `rpc.grpc.status_code != 0` which make the panel specific to the gRPC protocol.\n\nSee https://opentelemetry.io/docs/specs/semconv/rpc/rpc-metrics/#metric-rpcserverdurationInbound ",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "smooth",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "percent"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 6,
              "x": 6,
              "y": 12
            },
            "id": 34,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "single",
                "sort": "none"
              }
            },
            "pluginVersion": "11.5.1",
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "disableTextWrap": false,
                "editorMode": "code",
                "expr": "(sum without (rpc_grpc_status_code, instance) (rate(rpc_server_duration_milliseconds_count{job=\"$service_namespace/$service_name\", rpc_grpc_status_code!=\"0\"}[$__rate_interval])) * 100) / sum without (rpc_grpc_status_code, instance) (rate(rpc_server_duration_milliseconds_count{job=\"$service_namespace/$service_name\"}[$__rate_interval]))",
                "fullMetaSearch": false,
                "hide": false,
                "includeNullMetadata": true,
                "instant": false,
                "legendFormat": "Error",
                "range": true,
                "refId": "ERR",
                "useBackend": false
              }
            ],
            "title": "Error",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "description": "gRPC endpoints aggregation on the  `rpc.server.duration` metric.\n\nSee https://opentelemetry.io/docs/specs/semconv/rpc/rpc-metrics/#metric-rpcserverduration",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "axisSoftMin": 0,
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "log": 10,
                    "type": "log"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "min": 0,
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "reqps"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 5,
              "x": 12,
              "y": 12
            },
            "id": 35,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "single",
                "sort": "none"
              }
            },
            "pluginVersion": "11.5.1",
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "editorMode": "code",
                "expr": "(sum(rate(rpc_server_duration_milliseconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval])) by (job)) * $__interval_ms / 1000",
                "hide": false,
                "legendFormat": "Requests",
                "range": true,
                "refId": "RequestRate"
              }
            ],
            "title": "Request Rate",
            "type": "timeseries"
          }
        ],
        "title": "Server gRPC RED Metrics",
        "type": "row"
      },
      {
        "collapsed": true,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 12
        },
        "id": 22,
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "description": "Inbound HTTP operations of the service (aka HTTP endpoints) based on the `http.server.request.duration` metric.\n\nErrors are identified by `http.response.status_code=~\"5..\"`.\n\nSee https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpserverrequestduration",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "custom": {
                  "align": "auto",
                  "cellOptions": {
                    "type": "auto"
                  },
                  "inspect": false
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": [
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Duration (p99)"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "s"
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Rate"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "reqps"
                    },
                    {
                      "id": "custom.width",
                      "value": 219
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Error"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "percentunit"
                    }
                  ]
                }
              ]
            },
            "gridPos": {
              "h": 5,
              "w": 12,
              "x": 0,
              "y": 13
            },
            "id": 21,
            "options": {
              "cellHeight": "sm",
              "footer": {
                "countRows": false,
                "fields": "",
                "reducer": [
                  "sum"
                ],
                "show": false
              },
              "showHeader": true,
              "sortBy": [
                {
                  "desc": true,
                  "displayName": "Operation"
                }
              ]
            },
            "pluginVersion": "11.5.1",
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "disableTextWrap": false,
                "editorMode": "code",
                "expr": "\n        sum by (operation) (\n            label_join(\n                rate(http_server_request_duration_seconds_count{service_namespace=\"$service_namespace\", service_name=\"$service_name\"}[$__rate_interval]),\n                \"operation\",\n                \" \",\n                \"http_request_method\",\n                \"http_route\"\n            )\n        )\n    ",
                "fullMetaSearch": false,
                "includeNullMetadata": true,
                "legendFormat": "{{operation}}",
                "range": true,
                "refId": "RPS",
                "useBackend": false
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "editorMode": "code",
                "expr": "(\n        sum by (operation) (\n            label_join(\n                rate(http_server_request_duration_seconds_count{job=~\"$service_namespace/$service_name\", http_response_status_code=~\"5..\"}[$__rate_interval]),\n                \"operation\",\n                \" \",\n                \"http_request_method\",\n                \"http_route\"\n            )\n        )\n     / \n        sum by (operation) (\n            label_join(\n                rate(http_server_request_duration_seconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"operation\",\n                \" \",\n                \"http_request_method\",\n                \"http_route\"\n            )\n        )\n    ) or (0 * \n        sum by (operation) (\n            label_join(\n                rate(http_server_request_duration_seconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"operation\",\n                \" \",\n                \"http_request_method\",\n                \"http_route\"\n            )\n        )\n    )",
                "hide": false,
                "instant": false,
                "legendFormat": "{{operation}}",
                "range": true,
                "refId": "ERR_PCT"
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "editorMode": "code",
                "expr": "\n        histogram_quantile(\n            0.99,\n            sum by (le, operation) (\n                label_join(\n                rate(http_server_request_duration_seconds_bucket{job=~\"$service_namespace/$service_name\"}[5m]),\n                \"operation\",\n                \" \",\n                \"http_request_method\",\n                \"http_route\"\n                )\n            )\n        )\n    ",
                "hide": false,
                "instant": false,
                "legendFormat": "{{operation}}",
                "range": true,
                "refId": "Duration"
              }
            ],
            "title": "HTTP Operations",
            "transformations": [
              {
                "id": "timeSeriesTable",
                "options": {
                  "Duration": {
                    "timeField": "Time"
                  },
                  "ERR_PCT": {
                    "timeField": "Time"
                  },
                  "RPS": {
                    "timeField": "Time"
                  }
                }
              },
              {
                "id": "joinByField",
                "options": {
                  "byField": "operation",
                  "mode": "outer"
                }
              },
              {
                "id": "organize",
                "options": {
                  "excludeByName": {},
                  "includeByName": {},
                  "indexByName": {
                    "Trend #Duration": 1,
                    "Trend #ERR_PCT": 2,
                    "Trend #RPS": 3,
                    "operation": 0
                  },
                  "renameByName": {
                    "Trend #Duration": "Duration (p99)",
                    "Trend #ERR_PCT": "Error",
                    "Trend #RPS": "Rate",
                    "operation": "Operation"
                  }
                }
              }
            ],
            "type": "table"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "description": "Inbound gRPC operations of the service (aka gRPC endpoints) based on the `rpc.server.request.duration` metric.\n\nErrors are identified by `rpc.grpc.status_code != 0` which make the panel specific to the gRPC protocol.\n\nhttps://opentelemetry.io/docs/specs/semconv/rpc/rpc-metrics/#metric-rpcserverduration",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "custom": {
                  "align": "auto",
                  "cellOptions": {
                    "type": "auto"
                  },
                  "inspect": false
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": [
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Duration (p99)"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "ms"
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Rate"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "reqps"
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Error"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "percentunit"
                    }
                  ]
                }
              ]
            },
            "gridPos": {
              "h": 5,
              "w": 12,
              "x": 12,
              "y": 13
            },
            "id": 27,
            "options": {
              "cellHeight": "sm",
              "footer": {
                "countRows": false,
                "fields": "",
                "reducer": [
                  "sum"
                ],
                "show": false
              },
              "showHeader": true,
              "sortBy": [
                {
                  "desc": true,
                  "displayName": "Operation"
                }
              ]
            },
            "pluginVersion": "11.5.1",
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "disableTextWrap": false,
                "editorMode": "code",
                "expr": "\nsum by (operation) (\n    label_join(\n        rate(rpc_server_duration_milliseconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n        \"operation\",\n        \"/\",\n        \"rpc_service\",\n        \"rpc_method\"\n    )\n)\n    ",
                "fullMetaSearch": false,
                "hide": false,
                "includeNullMetadata": true,
                "legendFormat": "__auto",
                "range": true,
                "refId": "RPS",
                "useBackend": false
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "editorMode": "code",
                "expr": "(\n        sum by (operation) (\n            label_join(\n                rate(rpc_server_duration_milliseconds_count{job=~\"$service_namespace/$service_name\", rpc_grpc_status_code!=\"0\"}[$__rate_interval]),\n                \"operation\",\n                \"/\",\n                \"rpc_service\",\n                \"rpc_method\"\n            )\n        )\n     / \n        sum by (operation) (\n            label_join(\n                rate(rpc_server_duration_milliseconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"operation\",\n                \"/\",\n                \"rpc_service\",\n                \"rpc_method\"\n            )\n        )\n    ) or (0 * \n        sum by (operation) (\n            label_join(\n                rate(rpc_server_duration_milliseconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"operation\",\n                \"/\",\n                \"rpc_service\",\n                \"rpc_method\"\n            )\n        )\n    )\n    ",
                "hide": false,
                "instant": false,
                "legendFormat": "__auto",
                "range": true,
                "refId": "ERR_PCT"
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "editorMode": "code",
                "expr": "\n        histogram_quantile(\n            0.99,\n            sum by (le, operation) (\n                label_join(\n                rate(rpc_server_duration_milliseconds_bucket{job=~\"$service_namespace/$service_name\"}[5m]),\n                \"operation\",\n                \"/\",\n                \"rpc_service\",\n                \"rpc_method\"\n                )\n            )\n        )\n    ",
                "hide": false,
                "instant": false,
                "legendFormat": "{{operation}}",
                "range": true,
                "refId": "Duration"
              }
            ],
            "title": "gRPC Operations",
            "transformations": [
              {
                "id": "timeSeriesTable",
                "options": {
                  "Duration": {
                    "timeField": "Time"
                  },
                  "ERR_PCT": {
                    "timeField": "Time"
                  },
                  "RPS": {
                    "timeField": "Time"
                  }
                }
              },
              {
                "id": "joinByField",
                "options": {
                  "byField": "operation",
                  "mode": "outer"
                }
              },
              {
                "id": "organize",
                "options": {
                  "excludeByName": {},
                  "includeByName": {},
                  "indexByName": {
                    "Trend #Duration": 1,
                    "Trend #ERR_PCT": 2,
                    "Trend #RPS": 3,
                    "operation": 0
                  },
                  "renameByName": {
                    "Trend #Duration": "Duration (p99)",
                    "Trend #ERR_PCT": "Error",
                    "Trend #RPS": "Rate",
                    "operation": "Operation"
                  }
                }
              }
            ],
            "type": "table"
          }
        ],
        "title": "Inbound Operations",
        "type": "row"
      },
      {
        "collapsed": true,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 13
        },
        "id": 28,
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "description": "HTTP calls made by the service based on the `http.client.request.duration` metric.\n\nCalls broken done by remote `server.address` and by `http.request.method`.\n\nSee https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpclientrequestduration",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "custom": {
                  "align": "auto",
                  "cellOptions": {
                    "type": "auto"
                  },
                  "inspect": false
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": [
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Duration (P99)"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "s"
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Rate"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "reqps"
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Error"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "percentunit"
                    }
                  ]
                }
              ]
            },
            "gridPos": {
              "h": 6,
              "w": 12,
              "x": 0,
              "y": 14
            },
            "id": 23,
            "options": {
              "cellHeight": "sm",
              "footer": {
                "countRows": false,
                "fields": "",
                "reducer": [
                  "sum"
                ],
                "show": false
              },
              "showHeader": true
            },
            "pluginVersion": "11.5.1",
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "disableTextWrap": false,
                "editorMode": "code",
                "expr": "\n        sum by (outbound_service) (\n            label_join(\n                rate(http_client_request_duration_seconds_count{service_namespace=\"$service_namespace\", service_name=\"$service_name\"}[$__rate_interval]),\n                \"outbound_service\",\n                \" \",\n                \"server_address\",\n                \"http_request_method\",\n                \"url_template\"\n            )\n        )\n    ",
                "fullMetaSearch": false,
                "includeNullMetadata": true,
                "legendFormat": "{{server_address}} {{http_request_method}} {{url_template}}",
                "range": true,
                "refId": "RPS",
                "useBackend": false
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "editorMode": "code",
                "expr": "(\n        sum by (outbound_service) (\n            label_join(\n                rate(http_client_request_duration_seconds_count{job=~\"$service_namespace/$service_name\", http_response_status_code=~\"5..\"}[$__rate_interval]),\n                \"outbound_service\",\n                \" \",\n                \"server_address\",\n                \"http_request_method\",\n                \"url_template\"\n            )\n        )\n     / \n        sum by (outbound_service) (\n            label_join(\n                rate(http_client_request_duration_seconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"outbound_service\",\n                \" \",\n                \"server_address\",\n                \"http_request_method\",\n                \"url_template\"\n            )\n        )\n    ) or (0 * \n        sum by (outbound_service) (\n            label_join(\n                rate(http_client_request_duration_seconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"outbound_service\",\n                \" \",\n                \"server_address\",\n                \"http_request_method\",\n                \"url_template\"\n            )\n        )\n    )",
                "hide": false,
                "instant": false,
                "legendFormat": "{{server_address}} {{http_request_method}} {{url_template}}",
                "range": true,
                "refId": "ERR_PCT"
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "editorMode": "code",
                "expr": "\nhistogram_quantile(\n    0.99,\n    sum by (le, outbound_service) (\n        label_join(\n        rate(http_client_request_duration_seconds_bucket{job=~\"$service_namespace/$service_name\"}[5m]),\n        \"outbound_service\",\n        \" \",\n        \"server_address\",\n        \"http_request_method\",\n        \"url_template\"\n        )\n    )\n)",
                "hide": false,
                "instant": false,
                "legendFormat": "{{server_address}} {{http_request_method}} {{url_template}}",
                "range": true,
                "refId": "DURATION"
              }
            ],
            "title": "Outbound HTTP Services",
            "transformations": [
              {
                "id": "timeSeriesTable",
                "options": {
                  "Duration": {
                    "timeField": "Time"
                  },
                  "ERR_PCT": {
                    "timeField": "Time"
                  },
                  "RPS": {
                    "timeField": "Time"
                  }
                }
              },
              {
                "id": "joinByField",
                "options": {
                  "byField": "outbound_service",
                  "mode": "outer"
                }
              },
              {
                "id": "organize",
                "options": {
                  "excludeByName": {},
                  "includeByName": {},
                  "indexByName": {
                    "Trend #DURATION": 1,
                    "Trend #ERR_PCT": 2,
                    "Trend #RPS": 3,
                    "outbound_service": 0
                  },
                  "renameByName": {
                    "Trend #DURATION": "Duration (P99)",
                    "Trend #Duration": "Duration (p99)",
                    "Trend #ERR_PCT": "Error",
                    "Trend #RPS": "Rate",
                    "operation": "Operation",
                    "outbound_service": "Service"
                  }
                }
              }
            ],
            "type": "table"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "description": "DB calls made by the service based on the `db.client.operation.duration` metric.\n\nCalls broken down by `server.address` and `db.namespace`.\n\nSee https://opentelemetry.io/docs/specs/semconv/database/database-metrics/#metric-dbclientoperationduration\n",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "custom": {
                  "align": "auto",
                  "cellOptions": {
                    "type": "auto"
                  },
                  "inspect": false
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": [
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Duration (P99)"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "s"
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Rate"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "reqps"
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Error"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "percentunit"
                    }
                  ]
                }
              ]
            },
            "gridPos": {
              "h": 6,
              "w": 12,
              "x": 12,
              "y": 14
            },
            "id": 24,
            "options": {
              "cellHeight": "sm",
              "footer": {
                "countRows": false,
                "fields": "",
                "reducer": [
                  "sum"
                ],
                "show": false
              },
              "showHeader": true,
              "sortBy": []
            },
            "pluginVersion": "11.5.1",
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "disableTextWrap": false,
                "editorMode": "code",
                "expr": "sum by (database) (\n    label_join(\n        rate(db_client_operation_duration_seconds_count{service_namespace=~\"$service_namespace\", service_name=\"$service_name\"}[$__rate_interval]),\n        \"database\",\n        \"/\",\n        \"server_address\",\n        \"db_namespace\"\n    )\n)\n    ",
                "fullMetaSearch": false,
                "hide": false,
                "includeNullMetadata": true,
                "legendFormat": "{{server_address}} {{db_namespace}}",
                "range": true,
                "refId": "RPS",
                "useBackend": false
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "editorMode": "code",
                "expr": "(\n        sum by (database) (\n            label_join(\n                rate(db_client_operation_duration_seconds_count{job=~\"$service_namespace/$service_name\", http_response_status_code=~\"5..\"}[$__rate_interval]),\n                \"database\",\n                \"/\",\n                \"server_address\",\n                \"db_namespace\"\n            )\n        )\n     / \n        sum by (database) (\n            label_join(\n                rate(db_client_operation_duration_seconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"database\",\n                \"/\",\n                \"server_address\",\n                \"db_namespace\"\n            )\n        )\n    ) or (0 * \n        sum by (database) (\n            label_join(\n                rate(db_client_operation_duration_seconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"database\",\n                \"/\",\n                \"server_address\",\n                \"db_namespace\"\n            )\n        )\n    )",
                "hide": false,
                "instant": false,
                "legendFormat": "{{server_address}} {{db_namespace}}",
                "range": true,
                "refId": "ERR_PCT"
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "editorMode": "code",
                "expr": "\nhistogram_quantile(\n    0.99,\n    sum by (le, database) (\n        label_join(\n        rate(db_client_operation_duration_seconds_bucket{job=~\"$service_namespace/$service_name\"}[5m]),\n            \"database\",\n            \"/\",\n            \"server_address\",\n            \"db_namespace\"\n        )\n    )\n)",
                "hide": false,
                "instant": false,
                "legendFormat": "{{server_address}} {{db_namespace}}",
                "range": true,
                "refId": "DURATION"
              }
            ],
            "title": "Outbound Databases",
            "transformations": [
              {
                "id": "timeSeriesTable",
                "options": {
                  "DURATION": {
                    "timeField": "Time"
                  },
                  "Duration": {
                    "timeField": "Time"
                  },
                  "ERR_PCT": {
                    "timeField": "Time"
                  },
                  "RPS": {
                    "timeField": "Time"
                  }
                }
              },
              {
                "id": "joinByField",
                "options": {
                  "byField": "database",
                  "mode": "outer"
                }
              },
              {
                "id": "organize",
                "options": {
                  "excludeByName": {},
                  "includeByName": {},
                  "indexByName": {
                    "Trend #DURATION": 1,
                    "Trend #ERR_PCT": 2,
                    "Trend #RPS": 3,
                    "database": 0
                  },
                  "renameByName": {
                    "Trend #DURATION": "Duration (P99)",
                    "Trend #Duration": "Duration (p99)",
                    "Trend #ERR_PCT": "Error",
                    "Trend #RPS": "Rate",
                    "database": "Database",
                    "database_operation": "Database Operation",
                    "operation": "Operation",
                    "outbound_service": "Service"
                  }
                }
              }
            ],
            "type": "table"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "description": "gRPC calls made by the service based on the `rpc.client.request.duration` metric.\n\nSpecific to gRPC due to the usage of the `grpc.status.code` attribute to identify errors.\n\nCalls broken down by `server.address`, `rpc.service`, and `rpc.method`.\n\nSee https://opentelemetry.io/docs/specs/semconv/rpc/rpc-metrics/#rpc-client\n\n",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "custom": {
                  "align": "auto",
                  "cellOptions": {
                    "type": "auto"
                  },
                  "inspect": false
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": [
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Duration (P99)"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "ms"
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Rate"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "reqps"
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "Error"
                  },
                  "properties": [
                    {
                      "id": "unit",
                      "value": "percentunit"
                    }
                  ]
                }
              ]
            },
            "gridPos": {
              "h": 6,
              "w": 12,
              "x": 0,
              "y": 20
            },
            "id": 32,
            "options": {
              "cellHeight": "sm",
              "footer": {
                "countRows": false,
                "fields": "",
                "reducer": [
                  "sum"
                ],
                "show": false
              },
              "showHeader": true
            },
            "pluginVersion": "11.5.1",
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "disableTextWrap": false,
                "editorMode": "code",
                "expr": "\n        sum by (outbound_service) (\n            label_join(\n                rate(rpc_client_duration_milliseconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"outbound_service\",\n                \"/\",\n                \"server_address\",\n                \"rpc_service\",\n                \"rpc_method\"\n            )\n        )\n    ",
                "fullMetaSearch": false,
                "hide": false,
                "includeNullMetadata": true,
                "legendFormat": "__auto",
                "range": true,
                "refId": "RPS",
                "useBackend": false
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "editorMode": "code",
                "expr": "(\n        sum by (outbound_service) (\n            label_join(\n                rate(rpc_client_duration_milliseconds_count{job=~\"$service_namespace/$service_name\", http_response_status_code=~\"5..\"}[$__rate_interval]),\n                \"outbound_service\",\n                \"/\",\n                \"server_address\",\n                \"rpc_service\",\n                \"rpc_method\"\n            )\n        )\n     / \n        sum by (outbound_service) (\n            label_join(\n                rate(rpc_client_duration_milliseconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"outbound_service\",\n                \"/\",\n                \"server_address\",\n                \"rpc_service\",\n                \"rpc_method\"\n            )\n        )\n    ) or (0 * \n        sum by (outbound_service) (\n            label_join(\n                rate(rpc_client_duration_milliseconds_count{job=~\"$service_namespace/$service_name\"}[$__rate_interval]),\n                \"outbound_service\",\n                \"/\",\n                \"server_address\",\n                \"rpc_service\",\n                \"rpc_method\"\n            )\n        )\n    )",
                "hide": false,
                "instant": false,
                "legendFormat": "__auto",
                "range": true,
                "refId": "ERR_PCT"
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "${prometheus_datasource}"
                },
                "editorMode": "code",
                "expr": "\nhistogram_quantile(\n    0.99,\n    sum by (le, outbound_service) (\n        label_join(\n        rate(rpc_client_duration_milliseconds_bucket{job=~\"$service_namespace/$service_name\"}[5m]),\n        \"outbound_service\",\n        \"/\",\n        \"server_address\",\n        \"rpc_service\",\n        \"rpc_method\"\n        )\n    )\n)",
                "hide": false,
                "instant": false,
                "legendFormat": "__auto",
                "range": true,
                "refId": "DURATION"
              }
            ],
            "title": "Outbound gRPC Services",
            "transformations": [
              {
                "id": "timeSeriesTable",
                "options": {
                  "Duration": {
                    "timeField": "Time"
                  },
                  "ERR_PCT": {
                    "timeField": "Time"
                  },
                  "RPS": {
                    "timeField": "Time"
                  }
                }
              },
              {
                "id": "joinByField",
                "options": {
                  "byField": "outbound_service",
                  "mode": "outer"
                }
              },
              {
                "id": "organize",
                "options": {
                  "excludeByName": {},
                  "includeByName": {},
                  "indexByName": {
                    "Trend #DURATION": 1,
                    "Trend #ERR_PCT": 2,
                    "Trend #RPS": 3,
                    "outbound_service": 0
                  },
                  "renameByName": {
                    "Trend #DURATION": "Duration (P99)",
                    "Trend #Duration": "Duration (p99)",
                    "Trend #ERR_PCT": "Error",
                    "Trend #RPS": "Rate",
                    "operation": "Operation",
                    "outbound_service": "Service Method"
                  }
                }
              }
            ],
            "type": "table"
          }
        ],
        "title": "Outbound Services and Databases",
        "type": "row"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 14
        },
        "id": 25,
        "panels": [],
        "title": "Logs",
        "type": "row"
      },
      {
        "datasource": {
          "type": "loki",
          "uid": "P8E80F9AEF21F6940"
        },
        "description": "Logs of the service, filtered by `service.name` and `service.namespace`.\n\nTo explore the logs, open the menu clicking on the icon `⋮` of this panel and click on `Explore`.",
        "fieldConfig": {
          "defaults": {},
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 24,
          "x": 0,
          "y": 15
        },
        "id": 26,
        "options": {
          "dedupStrategy": "none",
          "enableInfiniteScrolling": true,
          "enableLogDetails": true,
          "prettifyLogMessage": false,
          "showCommonLabels": false,
          "showLabels": false,
          "showTime": true,
          "sortOrder": "Ascending",
          "wrapLogMessage": false
        },
        "pluginVersion": "11.5.1",
        "targets": [
          {
            "datasource": {
              "type": "loki",
              "uid": "${loki_datasource}"
            },
            "direction": "backward",
            "editorMode": "code",
            "expr": "{service_name=\"$service_name\", service_namespace=\"$service_namespace\"} | line_format `\u001b[1m{{if .level }}{{alignRight 5 .level}}{{else if .severity_text}}{{alignRight 5 .severity_text}}{{end}}\u001b[0m \u001b[90m[{{alignRight 10 .service_instance_id}}{{if .thread_name}}/{{alignRight 20 .thread_name}}{{else if eq \"java\" .telemetry_sdk_language }}                    {{end}}]\u001b[0m \u001b[36m{{if .scope_name }}{{alignRight 40 .scope_name}}{{end}}\u001b[0m {{__line__}} {{if .trace_id}} \u001b[37m\u001b[3m[trace_id={{.trace_id}}]{{end}}`",
            "queryType": "range",
            "refId": "A"
          }
        ],
        "title": "",
        "type": "logs"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 21
        },
        "id": 29,
        "panels": [],
        "title": "Traces",
        "type": "row"
      },
      {
        "datasource": {
          "type": "tempo",
          "uid": "tempo"
        },
        "description": "Traces containing a span emitted by the service",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "type": "auto"
              },
              "inspect": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Trace Service"
              },
              "properties": [
                {
                  "id": "custom.hidden",
                  "value": true
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Span ID"
              },
              "properties": [
                {
                  "id": "custom.hidden",
                  "value": false
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "deployment.environment.name"
              },
              "properties": [
                {
                  "id": "custom.hidden",
                  "value": true
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "service.name"
              },
              "properties": [
                {
                  "id": "custom.hidden",
                  "value": true
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "service.namespace"
              },
              "properties": [
                {
                  "id": "custom.hidden",
                  "value": true
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 15,
          "x": 0,
          "y": 22
        },
        "id": 30,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "frameIndex": 0,
          "showHeader": true
        },
        "pluginVersion": "11.5.1",
        "targets": [
          {
            "datasource": {
              "type": "tempo",
              "uid": "${tempo_datasource}"
            },
            "filters": [
              {
                "id": "service-name",
                "operator": "=",
                "scope": "resource",
                "tag": "service.name",
                "value": [
                  "$service_name"
                ],
                "valueType": "string"
              },
              {
                "id": "6997e808",
                "operator": "=",
                "scope": "resource",
                "tag": "deployment.environment.name",
                "value": [
                  "$deployment_environment_name"
                ],
                "valueType": "string"
              },
              {
                "id": "e9f0e855",
                "operator": "=",
                "scope": "resource",
                "tag": "service.namespace",
                "value": [
                  "$service_namespace"
                ],
                "valueType": "string"
              }
            ],
            "limit": 20,
            "metricsQueryType": "range",
            "query": "{resource.service.name=\"$service_name\" && resource.service.namespace=\"$service_namespace\"} | select(status)",
            "queryType": "traceql",
            "refId": "A",
            "tableType": "spans"
          }
        ],
        "title": "",
        "type": "table"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 30
        },
        "id": 37,
        "panels": [],
        "title": "Runtime",
        "type": "row"
      },
      {
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "description": "For JVM based services like Java or Kotlin, the JVM metrics.\n\nSee https://opentelemetry.io/docs/specs/semconv/runtime/jvm-metrics/",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "type": "auto"
              },
              "inspect": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Trend #CPU_PCT"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "percentunit"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Trend #GC_PCT"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "percentunit"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 5,
          "w": 12,
          "x": 0,
          "y": 31
        },
        "id": 38,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": true
        },
        "pluginVersion": "11.5.1",
        "targets": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "${prometheus_datasource}"
            },
            "editorMode": "code",
            "expr": "sum by(instance) (jvm_cpu_recent_utilization_ratio{job=\"$service_namespace/$service_name\"})",
            "hide": false,
            "legendFormat": "__auto",
            "range": true,
            "refId": "CPU_PCT"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "editorMode": "code",
            "expr": "sum by(instance) (rate(jvm_gc_duration_seconds_sum{job=\"$service_namespace/$service_name\"}[$__rate_interval]))",
            "hide": false,
            "instant": false,
            "legendFormat": "__auto",
            "range": true,
            "refId": "GC_PCT"
          }
        ],
        "title": "JVM",
        "transformations": [
          {
            "id": "timeSeriesTable",
            "options": {
              "A": {
                "timeField": "Time"
              },
              "CPU_PCT": {
                "timeField": "Time"
              },
              "GC_PCT": {
                "timeField": "Time"
              }
            }
          },
          {
            "id": "joinByField",
            "options": {
              "byField": "instance",
              "mode": "outer"
            }
          },
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "includeByName": {},
              "indexByName": {},
              "renameByName": {
                "Trend #CPU_PCT": "CPU",
                "Trend #GC_PCT": "Garbage Collector Time",
                "instance": "Instance"
              }
            }
          }
        ],
        "type": "table"
      }
    ],
    "preload": false,
    "refresh": "",
    "schemaVersion": 40,
    "tags": [
      "opentelemetry",
      "APM"
    ],
    "templating": {
      "list": [
        {
          "allowCustomValue": false,
          "current": {
            "text": "Prometheus",
            "value": "prometheus"
          },
          "label": "Metrics",
          "name": "prometheus_datasource",
          "options": [],
          "query": "prometheus",
          "refresh": 1,
          "regex": "",
          "type": "datasource"
        },
        {
          "allowCustomValue": false,
          "current": {
            "text": "Tempo",
            "value": "tempo"
          },
          "label": "Traces",
          "name": "tempo_datasource",
          "options": [],
          "query": "tempo",
          "refresh": 1,
          "regex": "",
          "type": "datasource"
        },
        {
          "allowCustomValue": false,
          "current": {
            "text": "Loki",
            "value": "P8E80F9AEF21F6940"
          },
          "label": "Logs",
          "name": "loki_datasource",
          "options": [],
          "query": "loki",
          "refresh": 1,
          "regex": "",
          "type": "datasource"
        },
        {
          "allowCustomValue": false,
          "current": {
            "text": "dev",
            "value": "dev"
          },
          "datasource": {
            "type": "tempo",
            "uid": "${tempo_datasource}"
          },
          "definition": "",
          "description": "Values instrospected from traces.",
          "label": "service.namespace",
          "name": "service_namespace",
          "options": [],
          "query": {
            "label": "service.namespace",
            "refId": "TempoDatasourceVariableQueryEditor-VariableQuery",
            "type": 1
          },
          "refresh": 2,
          "regex": "",
          "sort": 1,
          "type": "query"
        },
        {
          "current": {
            "text": "go-server",
            "value": "go-server"
          },
          "datasource": {
            "type": "tempo",
            "uid": "tempo"
          },
          "definition": "",
          "description": "Values instrospected from traces, filtering on the selected service namespace..",
          "label": "service.name",
          "name": "service_name",
          "options": [],
          "query": {
            "label": "service.name",
            "refId": "TempoDatasourceVariableQueryEditor-VariableQuery",
            "type": 1
          },
          "refresh": 2,
          "regex": "",
          "sort": 1,
          "type": "query"
        }
      ]
    },
    "time": {
      "from": "now-1h",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "Lightweight APM for OpenTelemetry",
    "uid": "febljk0a32qyoawe",
    "version": 5,
    "weekStart": ""
}